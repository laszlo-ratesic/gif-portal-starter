{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkWalletConnect","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","userAddress","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0236adfb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport kp from './keypair.json'\n\nimport { set } from \"@project-serum/anchor/dist/cjs/utils/features\";\n\n// Constants\nconst TWITTER_HANDLE = \"laszlo_ratesic\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime\nconst { SystemProgram, Keypair } = web3;\n\n// References keypair for the account that will hold the GIF data\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL fiel\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\"\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n\nconst App = () => {\n  //State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkWalletConnect = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n\n          // Set the user's publicKey in state to be used later!\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF\", error)\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  // We want to render the UI when user hasn't connected yet\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n\n    // Otherwise, account exists! User can submit GIFs\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter your gorilla gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt=\"Gorilla GIF\"/>\n                <p>Submitted by: {item.userAddress.toString()}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkWalletConnect();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Go the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      // Set state\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\"><span className=\"emoji\">🦍</span> Koko's Guerilla Art GIF Portal</p>\n          <p className=\"sub-text\">\n            View the world's pre-eminent geurilla art GIFs straight from the\n            metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}